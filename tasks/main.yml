---
- name: User | Creating groups
  group:
    name: "{{ item.name }}"
    gid: "{{ item.gid | default(omit) }}"
  with_items: "{{ groups_to_create }}"
  tags: ["users", "groups", "configuration"]


- name: User | Per-user group creation
  group:
    name: "{{ item.username }}"
    gid: "{{ item.gid | default(item.uid) | default(omit) }}"
  with_items: "{{ users }}"
  when: "'group' not in item and users_create_per_user_group"
  tags: ["users", "groups", "configuration"]

- name: User | User creation
  user:
    name: "{{ item.username }}"
    group: "{{ item.group | default(item.username if users_create_per_user_group else users_group) }}"
    # empty string removes user from all secondary groups
    groups: "{{ item.groups | join(',') if 'groups' in item else '' }}"
    append: "{{ item.append | default(omit) }}"
    shell: "{{ item.shell if item.shell is defined else users_default_shell }}"
    password: "{{ item.password if item.password is defined else '!' }}"
    comment: "{{ item.comment if item.comment is defined else '' }}"
    uid: "{{ item.uid | default(omit) }}"
    home: "{{ item.home | default('/home/' + item.username) }}"
    createhome: "{{ 'yes' if users_create_homedirs else 'no' }}"
    generate_ssh_key: "{{ item.generate_ssh_key | default(omit) }}"
    update_password: "{{ item.update_password | default(omit) }}"
  with_items: "{{ users }}"
  tags: ["users", "configuration"]

- name: User | Adding user to sudoers with a password
  copy:
    dest: "/etc/sudoers.d/ansible_{{ item.username }}"
    content: "{{ item.username }} ALL=(ALL) ALL"
    mode: 0440
    validate: 'visudo -cf %s'
  loop: "{{ users }}"
  when: item.password is defined
  become: yes
  tags: ["users", "configuration"]

- name: User | Adding user to sudoers without a password
  copy:
    dest: "/etc/sudoers.d/ansible_{{ item.username }}"
    content: "{{ item.username }} ALL=(ALL) NOPASSWD:ALL"
    mode: 0440
    validate: 'visudo -cf %s'
  loop: "{{ users }}"
  when: item.password is not defined
  become: yes
  tags: ["users", "configuration"]

- name: User | Deleted user removal
  user:
    name: "{{ item.username }}"
    state: absent
    remove: "{{ item.remove | default(omit) }}"
    force: "{{ item.force | default(omit) }}"
  with_items: "{{ users_deleted }}"
  tags: ["users", "configuration"]

- name: User | Deleted per-user group removal
  group:
    name: "{{ item.username }}"
    state: absent
  with_items: "{{ users_deleted }}"
  when: users_create_per_user_group
  tags: ["users", "configuration"]
